name: build

on:
  push:
    branches: '*'
  pull_request:
    types: [opened, synchronize]

jobs:
  unitTest:
    runs-on: ubuntu-22.04  # old enough for py2
    steps:
      - name: Checkout the project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
      - name: Install apt dependencies
        run: sudo apt-get update && sudo apt-get install virtualenv python2-dev libxml2-dev libxslt-dev
      - name: Install dependencies
        run: virtualenv --python=/usr/bin/python2 venv && venv/bin/pip install -r requirements.txt
      - name: Run unit tests
        run: . venv/bin/activate && ./tests.sh

  dockerize:
    needs: unitTest
    runs-on: ubuntu-24.04
    if: github.repository == 'hufman/vgmdb'
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      - name: Checkout the project
        uses: actions/checkout@v4
      - name: Login to DockerHub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u hufman --password-stdin
      - name: Get the version
        run: echo REV=$(echo ${GITHUB_SHA:0:8}) >> $GITHUB_ENV

      - name: Prepare Qemu building
        uses: docker/setup-qemu-action@v2

      - name: Pull reqs image, if existant
        run: |
          . docker/_inc.sh
          reqs_id=`get_reqs_id`-${{ matrix.platform }}
          docker pull hufman/vgmdb_reqs:$reqs_id && docker tag hufman/vgmdb_reqs:$reqs_id vgmdb_reqs:$reqs_id || true

      - name: Build the combined image
        run: docker/docker-build.sh
        env:
          PLATFORM: ${{ matrix.platform }}
      - name: Build the celery image
        run: |
          PLATFORM=${{ matrix.platform }}
          docker/docker-celery.sh vgmdb:$REV-$PLATFORM
      - name: Build the web image
        run: |
          PLATFORM=${{ matrix.platform }}
          docker/docker-web.sh vgmdb:$REV-$PLATFORM

      - name: Check if reqs image needs to be pushed
        id: check_reqs_image
        run: |
          reqs_id=`docker images | grep ^vgmdb_reqs | awk '{print $2}'`
          echo "::set-output name=exists::"$(docker manifest inspect hufman/vgmdb_reqs:$reqs_id > /dev/null && echo true || echo false)

      - name: Push the reqs image
        if: steps.check_reqs_image.outputs.exists == 'false'
        run: |
          reqs_id=`docker images | grep ^vgmdb_reqs | awk '{print $2}'`
          docker tag vgmdb_reqs:$reqs_id hufman/vgmdb_reqs:$reqs_id
          docker push hufman/vgmdb_reqs:$reqs_id

      - name: Tag and push the images
        run: |
          PLATFORM=${{ matrix.platform }}
          docker tag vgmdb:$REV-$PLATFORM hufman/vgmdb:$REV-$PLATFORM
          docker push hufman/vgmdb:$REV-$PLATFORM
          docker tag vgmdb_celery:$REV-$PLATFORM hufman/vgmdb_celery:$REV-$PLATFORM
          docker push hufman/vgmdb_celery:$REV-$PLATFORM
          docker tag vgmdb_web:$REV-$PLATFORM hufman/vgmdb_web:$REV-$PLATFORM
          docker push hufman/vgmdb_web:$REV-$PLATFORM

  dockerfinalize:
    needs: dockerize
    runs-on: ubuntu-24.04
    if: github.repository == 'hufman/vgmdb'
    steps:
      - name: Login to DockerHub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u hufman --password-stdin
      - name: Get the version
        run: echo REV=$(echo ${GITHUB_SHA:0:8}) >> $GITHUB_ENV
      - name: Combine multiplatform images
        run: |
          docker manifest create hufman/vgmdb:$REV $(docker manifest inspect hufman/vgmdb:$REV-amd64 >/dev/null && echo hufman/vgmdb:$REV-amd64) $(docker manifest inspect hufman/vgmdb:$REV-arm64 >/dev/null && echo hufman/vgmdb:$REV-arm64)
          docker manifest push hufman/vgmdb:$REV
          docker manifest create hufman/vgmdb_celery:$REV $(docker manifest inspect hufman/vgmdb_celery:$REV-amd64 >/dev/null && echo hufman/vgmdb_celery:$REV-amd64) $(docker manifest inspect hufman/vgmdb_celery:$REV-arm64 >/dev/null && echo hufman/vgmdb_celery:$REV-arm64)
          docker manifest push hufman/vgmdb_celery:$REV
          docker manifest create hufman/vgmdb_web:$REV $(docker manifest inspect hufman/vgmdb_web:$REV-amd64 >/dev/null && echo hufman/vgmdb_web:$REV-amd64) $(docker manifest inspect hufman/vgmdb_web:$REV-arm64 >/dev/null && echo hufman/vgmdb_web:$REV-arm64)
          docker manifest push hufman/vgmdb_web:$REV

      - name: Tag and push the latest images
        if: github.event.ref == 'refs/heads/master'
        run: |
          docker manifest create hufman/vgmdb:latest $(docker manifest inspect hufman/vgmdb:$REV-amd64 >/dev/null && echo hufman/vgmdb:$REV-amd64) $(docker manifest inspect hufman/vgmdb:$REV-arm64 >/dev/null && echo hufman/vgmdb:$REV-arm64)
          docker manifest push hufman/vgmdb:latest
          docker manifest create hufman/vgmdb_celery:latest $(docker manifest inspect hufman/vgmdb_celery:$REV-amd64 >/dev/null && echo hufman/vgmdb_celery:$REV-amd64) $(docker manifest inspect hufman/vgmdb_celery:$REV-arm64 >/dev/null && echo hufman/vgmdb_celery:$REV-arm64)
          docker manifest push hufman/vgmdb_celery:latest
          docker manifest create hufman/vgmdb_web:latest $(docker manifest inspect hufman/vgmdb_web:$REV-amd64 >/dev/null && echo hufman/vgmdb_web:$REV-amd64) $(docker manifest inspect hufman/vgmdb_web:$REV-arm64 >/dev/null && echo hufman/vgmdb_web:$REV-arm64)
          docker manifest push hufman/vgmdb_web:latest

      - name: Deploy the latest version
        if: github.event.ref == 'refs/heads/master'
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/actions/workflows/deploy.yml/dispatches
        env:
          GITHUB_TOKEN: "${{ secrets.DEPLOY_TOKEN }}"
          INPUT_REPOSITORY: "${{ github.repository }}"
          INPUT_REF: master
          INPUT_INPUTS: '{"tag": "${{env.REV}}"}'

